import os
from typing import Dict, List
import openai
import json
from utils.prompt_utils import build_prompt

class ChatGPTReviewer:
    """ChatGPT 審核器，用於整合和審核來自不同模型的詞彙列表"""
    
    def __init__(self):
        self.api_key = os.getenv('OPENAI_API_KEY')
        self.model = "gpt-3.5-turbo"
        
    def review_vocabulary(self, vocab_lists: Dict[str, Dict[str, List[str]]], learned_words: List[str] = None) -> Dict[str, List[str]]:
        """
        整合並審核來自不同模型的詞彙列表
        
        Args:
            vocab_lists (Dict[str, Dict[str, List[str]]]): 來自不同模型的詞彙列表
            learned_words (List[str], optional): 已學習過的單字列表，預設為 None
            
        Returns:
            Dict[str, List[str]]: 審核後的詞彙列表
        """
        try:
            # 如果沒有提供已學習的單字，使用空列表
            if learned_words is None:
                learned_words = []
                
            # 準備提示詞
            prompt = self._prepare_prompt(vocab_lists, learned_words)
            
            # 調用 ChatGPT API
            response = openai.ChatCompletion.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": "你是一個專業的英文詞彙審核專家，請整合並審核來自不同模型的詞彙列表。"},
                    {"role": "user", "content": prompt}
                ]
            )
            
            # 解析回應
            result = json.loads(response.choices[0].message.content)
            
            # 轉換為標準格式
            return {
                "vocabulary": [item["word"] for item in result["phrases"]],
                "chinese_words": [item["chinese_word"] for item in result["phrases"]],
                "definitions": [item["definition"] for item in result["phrases"]],
                "chinese_definitions": [item["chinese_definition"] for item in result["phrases"]],
                "examples": [item["examples"] for item in result["phrases"]],
                "synonyms": [item["synonyms"] for item in result["phrases"]],
                "antonyms": [item["antonyms"] for item in result["phrases"]]
            }
            
        except Exception as e:
            print(f"ChatGPT 審核錯誤: {str(e)}")
            return {
                "vocabulary": [],
                "chinese_words": [],
                "definitions": [],
                "chinese_definitions": [],
                "examples": [],
                "synonyms": [],
                "antonyms": []
            }
    
    def _prepare_prompt(self, vocab_lists: Dict[str, Dict[str, List[str]]], learned_words: List[str]) -> str:
        """
        準備英文提示詞，用於多模型詞彙結果的審核與整合。
        
        Args:
            vocab_lists: 各模型輸出的詞彙字典，格式為 {model_name: {"phrases": [ ... ]}}
            learned_words: 已學過的單字清單，避免重複學習
            
        Returns:
            str: 格式化後的提示詞
        """
        prompt = """You are an expert English language instructor helping intermediate to advanced learners.

Below are vocabulary suggestions generated by several different AI models based on the same English text.

Your task is to:
1. Review the vocabulary items from each model.
2. Remove any duplicated or overly simple/common words (especially those already learned).
3. Ensure each selected item includes:
   - a word or phrase
   - a Chinese translation
   - an English definition
   - a Chinese definition
   - at least 2 example sentences
   - synonyms (if any)
   - antonyms (if any)
4. Select and return the final combined list of the most suitable vocabulary for learning.

Only return the final selected vocabulary list in the following JSON format:
{
  "phrases": [
    {
      "word": "word or phrase",
      "chinese_word": "中文翻譯",
      "definition": "English definition",
      "chinese_definition": "中文解釋",
      "examples": ["example sentence 1", "example sentence 2"],
      "synonyms": ["synonym 1", "synonym 2"],
      "antonyms": ["antonym 1", "antonym 2"]
    },
    ...
  ]
}

Avoid including any extra commentary or explanation outside the JSON.

Learned words (do NOT include these again):
"""
        prompt += json.dumps(learned_words, ensure_ascii=False, indent=2)
        prompt += "\n\n"

        # 加入每個模型的輸出
        for model_name, vocab_dict in vocab_lists.items():
            prompt += f"Vocabulary from {model_name}:\n"
            prompt += json.dumps(vocab_dict, ensure_ascii=False, indent=2)
            prompt += "\n\n"

        return prompt